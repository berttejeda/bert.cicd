apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: buildkit-
spec:
  ttlStrategy:
    secondsAfterCompletion: 1800  # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
    secondsAfterSuccess: 1800     # Time to live after workflow is successful
    secondsAfterFailure: 1800     # Time to live after workflow fails
  arguments:
    parameters:
      - name: repo
        value: git@github.com:berttejeda/bert.cicd.git
      - name: branch
        value: main
      - name: path
        value: bitcoin
      - name: app
        value: bitcoin
      - name: docker_repo
        value: berttejeda
      - name: tag
        value: latest
      - name: namespace
        value: argo-cicd
      - name: wait_ts
        value: 90s
  entrypoint: main
  volumeClaimTemplates:
    - metadata:
        name: work
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
  volumes:
    # You can create the git credentials secret like so:
    # kubectl create secret generic ssh-git-creds \
    # --from-file=ssh_privatekey=$HOME/.ssh/id_rsa \
    # --from-file=known_hosts=$HOME/.ssh/known_hosts
    - name: ssh-git-creds
      secret:
        defaultMode: 0600
        secretName: ssh-git-creds
        items:
          - key: ssh_privatekey
            path: id_rsa
          - key: known_hosts
            path: known_hosts            
  templates:
    - name: main
      dag:
        tasks:
          - name: clone
            template: clone
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
          - name: image-build
            template: image-build
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
                - name: image
                  value: "{{workflow.parameters.docker_repo}}/{{workflow.parameters.app}}:{{workflow.parameters.tag}}"
            depends: "clone"
          - name: image-scan
            template: image-scan
            arguments:
              parameters:
                - name: image
                  value: "{{workflow.parameters.docker_repo}}/{{workflow.parameters.app}}:{{workflow.parameters.tag}}"
            depends: "image-build"
          - name: deploy
            template: deploy
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
            depends: "image-scan"
          - name: verify
            template: verify
            arguments:
              parameters:
                - name: app
                  value: "{{workflow.parameters.app}}"
                - name: path
                  value: "{{workflow.parameters.path}}"
                - name: namespace
                  value: "{{workflow.parameters.namespace}}"
                - name: wait_ts
                  value: "{{workflow.parameters.wait_ts}}"
            depends: "image-scan"
    - name: clone
      inputs:
        parameters:
          - name: repo
          - name: branch
      container:
        volumeMounts:
          - mountPath: /work
            name: work
          - name: ssh-git-creds
            mountPath: /root/.ssh          
        image: alpine/git:v2.26.2
        workingDir: /work
        # Do a shallow clone, which is the fastest way to clone, by using the
        # --depth, --branch, and --single-branch options
        command: 
          - git
        args:
          - clone
          - --depth
          - "1"
          - --branch
          - "{{inputs.parameters.branch}}"
          - --single-branch
          - "{{inputs.parameters.repo}}"
          - .
    - name: image-build
      inputs:
        parameters:
          - name: path
          - name: image
      # Publishing images requires an access token. For hub.docker.com you can create one at 
      # https://hub.docker.com/settings/security
      # This needs to be mounted as `$DOCKER_CONFIG/config.json`. To do this, you'll need to create a secret as follows:
      #   export DOCKER_USERNAME=$(read -s;echo $REPLY)
      #   export DOCKER_TOKEN=$(read -s;echo $REPLY)
      #   kubectl -n argo-cicd create secret generic docker-config --from-literal="config.json={\"auths\": {\"https://index.docker.io/v1/\": {\"auth\": \"$(echo -n $DOCKER_USERNAME:$DOCKER_TOKEN|base64)\"}}}"
      #REFERENCES:
      #  * https://github.com/moby/buildkit#expose-buildkit-as-a-tcp-service
      #  * https://blog.alexellis.io/building-containers-without-docker/
      #  * https://hub.docker.com/r/moby/buildkit          
      volumes:
        # Mount the configuration so we can push the image.
        # This should create the /.docker/config.json file.
        - name: docker-config
          secret:
            secretName: docker-config
      container:
        image: moby/buildkit:v0.10.3-rootless
        volumeMounts:
          - name: work
            mountPath: /work
          - name: docker-config
            mountPath: /home/user/.docker
        workingDir: /work/{{inputs.parameters.path}}
        env:
          - name: BUILDKITD_FLAGS
            value: --oci-worker-no-process-sandbox
          - name: DOCKER_CONFIG
            value: /home/user/.docker
        command:
          - buildctl-daemonless.sh
        args:
          - build
          - --frontend
          - dockerfile.v0
          - --local
          - context=.
          - --local
          - dockerfile=.
          - --output
          - type=image,name={{inputs.parameters.image}},push=true
    - name: image-scan
      inputs:
        parameters:
          - name: image
      container:
        image: docker.io/aquasec/trivy
        name: image-scan
        command:
          - trivy
        args:
          - image
          - '--severity'
          - 'CRITICAL'
          - '--exit-code'
          - '1'
          - '{{inputs.parameters.image}}'
    - name: deploy
      inputs:
        parameters:
          - name: path
      container:
        image: bitnami/kubectl:1.24.3
        volumeMounts:
          - name: work
            mountPath: /work
        workingDir: /work/{{inputs.parameters.path}}        
        command: [/opt/bitnami/kubectl/bin/kubectl]
        args: 
          - apply
          - -f
          - .
    - name: verify
      inputs:
        parameters:
          - name: app 
          - name: path
          - name: namespace
          - name: wait_ts
      container:
        image: bitnami/kubectl:1.24.3
        volumeMounts:
          - name: work
            mountPath: /work
        workingDir: /work/{{inputs.parameters.path}}        
        command: [/opt/bitnami/kubectl/bin/kubectl]
        args: 
          - wait 
          - deployment 
          - -n 
          - "{{inputs.parameters.namespace}}" 
          - "{{inputs.parameters.app}}" 
          - --for 
          - condition=Available=True 
          - "--timeout={{inputs.parameters.wait_ts}}"
                    